Add the possibility to delete student lists on the parameters page.

Add the option to send emails to the students with the grade in the message and the corrected copy in the attachment (they are in the tmpdir cr/corrections/pdf in the form "num.pdf" where num is internal student number). This should be at the bottom of the "Corriger" tab. Please make it such that the instructor can visualize the email including the attachment for each students before they can press a send button. Please, use the email_service.py of the backend.

On the "Corriger" tab please add a button, below the "Association des étudiants" box to recalculate the grades after potential modifications done by the instructor in the boxes "Cases détectées pour vérification" and "Association des étudiants" of a change in the latex source (number of points, correct<->wrong answer options). This involvex running again the auto-multiple-choice cli commands note, export (ods and CSV), and annotate.

When the instructor clicks on the name of a quiz that is in a lock state, display the "Corriger" tab by default. Similarly, when corrected copies have already been analyzed, i.e. a notes.csv file is in the uploads/amc_sessions/{quiz_id} folder, please show the "Cases détectées pour vérification", "Association des étudiants" and "Envoyer les corrections par e- mail" (the latter if email addresses are available).

When creating the latex document in latex_service.py, please choose automatically the \begin{reponseshoriz} ... \end{reponseshoriz} or \begin{reponses} ... \end{reponses} environment for the answer options based on the amount of space they use. For short answer options use reponseshoriz and for longer ones reponses. To determine whether answer options are short use the following calculation: total number of characters in all answer options plus the number of answeroptions times 7 should be smaller than 47 for reponseshoriz.

We need to determine how many pages the compiled latex document will have per student copy. This is specified with the \AMCaddpagesto{xxx} command. For determining this value, please first compile an individual copy (the same what is done now with the Corrigé individuel (1 copie) button currently) but leaving out the AMCaddpagesto command. If the number of pages of the resulting pdf is n the, the value used with AMCaddpagesto should be 1 if n==1, 2*ceil(n/2) if n>1 in case two page on one printing is deactivated or 4*ceil(n/4) if n>1 if it is activated. Let the user activate/deactivate two page on one printing with a checkbox in the "Créer sujet PDF version finale" box

In case, 2 pages on one printing is requested by the user, run "pdfjam --landscape --nup '2x1' DOC-subject.pdf"

In case, 2 pages on one printing is requested by the user, run:
pdfjam uploaded_student_copies.pdf --trim '0cm 0cm 0cm 14.85cm' --clip true --outfile left.pdf
pdfjam uploaded_student_copies.pdf --trim '0cm 14.85cm 0cm 0cm' --clip true --outfile right.pdf
pdfjam left.pdf --angle 90 --paper a4paper --scale 2 --outfile left_rotated.pdf
pdfjam right.pdf --angle 90 --paper a4paper --scale 2 --outfile right_rotated.pdf
pdftk A=left_rotated.pdf B=right_rotated.pdf shuffle A B output copiessplita4.pdf
in the scan service on the uploaded pdf first before analysing

When sending emails to many students add a delay of 5 seconds between sending individual emails please in the email preview feature add the replyto and bcc fields please add a small progress counter when sending bulk email.

Get the name from sending the name-<n>.jpg file to gpt5 asking it for first name and last name (json format) (for the liste.csv nom and prenom column), get the student number from looking it up in the association.association table of association.sqlite db (for the liste.csv id column). The column "student" should match the number of the name-<n>.jpg filename (this is the internal id for the student) while the auto column indicates the corresponing student number. If the value of the auto column is not available, write the internal id into the manual column of the db table and use it as id in the to be created liste.csv file.

Ai service should use:
client = OpenAI()
result = client.responses.create(
    model="gpt-5",
    input="Write a haiku about code.",
    reasoning={ "effort": "low" },
)

In grades table display first name, last name, grade, email adress and a link to the pdf with the correction for the particular student. The pdfs are in[tmp_dir]/cr/corrections/pdf/

the function generate_questions returns questions and their answer options. However it is always the first option that is correct, please reorder the 4 answer options randomly once the reponse from gpt5 is received

Default student instructions:
Aucun document n'est autorisé. L'usage de la calculatrice est interdit. Les questions faisant apparaître le symbole ♣ peuvent présenter zéro, une ou plusieurs bonnes réponses. Les autres ont une unique bonne réponse.

